/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL)    return true;
        
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        ListNode* firstend = slow;
        ListNode* secondstart = reverselist(slow->next);
        
        ListNode* p1 = head;
        ListNode* p2 = secondstart;
        while(p2 != NULL){
            if(p1->val != p2->val)  return false;
            p1 = p1->next;
            p2 = p2->next;
        }
        return true;
    }
private:
    ListNode* reverselist(ListNode* head){
        ListNode* pre = NULL;
        ListNode* cur = head;
        while(cur != NULL){
            ListNode* tmp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = tmp;
        }
        return pre;
    }
};