class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        // Divide and conquer:
        if(nums.size() == 1)
            return nums[0];
        if(nums.size() == 2){
            return max(nums[0]+nums[1], max(nums[0],nums[1]));
        }
        return helper(nums,0,nums.size()-1);
    }
private:
    int helper(vector<int>& nums,int left,int right){
        if(left > right){
            return -1;
        }
        int mid = left + (right - left)/2;
        
        int cur=0,best_left=0,best_right=0;
        for(int i=mid-1;i>=left;i--){
            cur += nums[i];
            best_left = max(best_left,cur);
        }
        cur = 0;
        for(int i=mid+1;i<=right;i++){
            cur += nums[i];
            best_right = max(best_right,cur);
        }
        
        int best_sum = nums[mid] + best_left + best_right;
        int left_sum = helper(nums,left,mid-1);
        int right_sum = helper(nums,mid+1,right);
        return max(best_sum,max(left_sum,right_sum));
    }
};